|---------------------------------|
|      sizeof işleci – 1          |
|---------------------------------|

C dilinin anahtar sözcüklerinden biri olan sizeof bir işleç görevindedir. Tek terimli olan ve önek konumunda (unary prefix) bulunan sizeof işleci, bir nesnenin bellekte kaç byte yer kapladığı değerini üretir. Bu işlecin ürettiği değer, derleme zamanında derleyici için bir sabit ifadesidir. sizeof işlecinin ürettiği değer standart bir typedef ismi olan size_t türündendir. size_t türü derleyiciye bağlı olarak seçilen bir işaretsiz tamsayı türüdür. size_t türü derleyiciler tarafından unsigned int, unsigned long ya da unsigned long long türlerinden birinin typedef ismi olarak seçilebilir. size_t türünün typedef bildirimi C'nin stddef.h isimli başlık dosyasında yapılmıştır.

sizeof işleci iki ayrı şekilde kullanılabilir:

i) İşlecin terimi olarak bir tür bilgisi kullanılabilir. Bu durumda terimin parantez içine alınması zorunludur:

sizeof(int)
sizeof(double)
sizeof(long)

İşleç bu durumda terimi olan türden bir nesnenin kullanılan sistemde, bellekte kaç byte yer kapladığı değerini üretir. Örneğin Windows ya da UNIX sistemlerinde

sizeof(int)

ifadesinin değeri tipik olarak 4'tür.

ii)  İşlecin terimi olarak herhangi bir ifade kullanılabilir. Bu durumda terimin parantez içine alınması zorunlu değildir. Ancak programcıların çoğu okunabilirlik açısından işlecin terimi olan ifadeyi parantez içine almayı yeğler:

/* ---------------------kod----------------------------*/

#include <stdio.h>

int main()
{
	int x = 10;
	double d = 2.3;

	printf("sizeof x   = %u\n", sizeof x);
	printf("sizeof (d) = %u\n", sizeof(d));
	printf("sizeof (2 + 5.3) = %u\n", sizeof(2 + 5.3));

	return 0;
}

#include <stdio.h>
 
int main()
{
	int x = 10;
	double d = 2.3;
 
	printf("sizeof x   = %u\n", sizeof x);
	printf("sizeof (d) = %u\n", sizeof(d));
	printf("sizeof (2 + 5.3) = %u\n", sizeof(2 + 5.3));
 
	return 0;
}

/* ----------------------------------------------------*/

Yukarıdaki kodda

sizeof(2 + 5.3)

sizeof işlecinin terimi olan ifade double türdendir. Bu yüzden bu ifadenin değeri

sizeof(double)

ifadesinin değerine eşittir.

Bir dizinin ismi sizeof işlecinin terimi olduğunda, derleyici dizi ismini dizinin ilk öğesinin adresine dönüştürmez. sizeof işleci bu durumda dizinin bellekte kaç byte yer kapladığı değerini üretir. Aşağıdaki koda bakalım:

/* ---------------------kod----------------------------*/

#include <stdio.h>

int main()
{
	char s[10] = "ali";
	int a[20] = { 0 };
	double b[40] = { 0 };

	printf("sizeof(s) = %u\n", sizeof(s));
	printf("sizeof(a) = %u\n", sizeof(a));
	printf("sizeof(b) = %u\n", sizeof(b));
}

/* ----------------------------------------------------*/

Benim çalıştığım sistemde bu programı derleyip çalıştırdığımda programın çıktısı şu şekilde oldu:

sizeof(s) = 10
sizeof(a) = 80
sizeof(b) = 320

Dizi için elde edilen sizeof değerini dizinin bir öğesi için elde edilen sizeof değerine bölersek bir derleme zamanı sabiti olarak dizinin boyutunu buluruz:

a herhangi türden bir dizi olsun. Bu durumda

sizeof(a) / sizeof(a[0])

bir sabit ifadesidir ve bu ifadenin değeri a dizisinin boyutudur. Dizinin bir öğesini bir ifade olarak kullanmak için içerik (dereferencing) işleci de kullanılabilir:

sizeof(a) / sizeof(*a)

ifadesinin değeri yine a dizisinin boyutudur:

Dizi tanımlamalarında, ilk değer verilen dizilerin boyutlarının belirtilmeyebileceği, derleyicinin dizi boyutunu verilen ilk değerlerin sayısından çıkardığını biliyorsunuz. Aşağıdaki kodu inceleyin:

/* ---------------------kod----------------------------*/

#include <stdio.h>

int main()
{
	int a[] = {2, 5, 7, 8, 9, 23, 67};
	int k;

	for (k = 0; k < sizeof(a) / sizeof(a[0]); ++k)
		printf("%d ", a[k]);

	printf("\n");

	return 0;
}

/* ----------------------------------------------------*/

main işlevi içinde tanımlanan int türden a isimli dizi boyutu belirtilmeden ilk değer verilerek tanımlanmış. Bu durumda derleyici verilen ilk değerlerin sayısını sayarak dizinin boyutunu 8 kabul eder. main işlevi içinde yer alan for döngü deyimi, dizinin eleman sayısı kadar, yani 8 kez döner. Şimdi kaynak kodda değişiklik yapıldığını, a dizisine birkaç öğe daha eklendiğini düşünelim:

int a[] = {2, 5, 7, 8, 9, 23, 67, 34, 58, 45, 92};

Bu durumda for döngü deyiminde bir değişiklik yapılmasına gerek kalmaz. Çünkü derleyici bu kez derleme zamanında dizinin boyutunu 11 olarak hesaplar ve for döngü deyimi içinde kullanılan

sizeof(a) / sizeof(a[0])

ifadesi de bu kez 11 değerini üretir.

sizeof işleci ile dizi boyutunu elde eden ifade okuma ve yazma kolaylığı sağlaması için çoğunlukla bir işlevsel makro olarak kullanılır:

#define asize(a)  (sizeof((a)) / sizeof((*a)))

sizeof işlecinin önceliği
=========================
Tek terimli tüm işleçlerin, daha önce oluşturduğumuz işleç öncelik tablosunun ikinci seviyesinde yer aldığını biliyorsunuz. sizeof da ikinci seviyede bulunan bir işleçtir:

#include <stdio.h>

int main()
{
	int x = 10;

	size_t y1 = sizeof x + 5;
	size_t y2 = sizeof (x + 5);
	//

	return 0;
}

Yukarıdaki kod int türünün 4 byte olduğu bir sistemde derleniyor olsun:

sizeof x + 5

ifadesinin değeri 9 iken

sizeof (x + 5)

ifadesinin değeri 4’tür.

sizeof işlecinin terimi olan ifadenin yan etkisi
================================================
sizeof işlecinin terimi olan ifade değerlendirilmez. Derleyici işlecin terimi olan ifadeyi derleme zamanında bir tür bilgisi olarak ele alır ve bu ifade için bir işlem kodu üretmez.

/* ---------------------kod----------------------------*/

#include <stdio.h>

int func()
{
	printf("func()");
        return 1;
}


int main()
{
	int x = 10;

	size_t y = sizeof(x++);
	size_t z = sizeof(func());
	
	printf("x = %d\n", x);

	return 0;
}

/* ----------------------------------------------------*/

Yukarıdaki kodda main işlevi içinde x değişkeni arttırılmaz. 

x++

ifadesi int türdendir. Derleyici bu ifadeyi yalnızca bir tür bilgisi olarak ele alır. İfadenin türü int olduğundan y değişkenine sizeof(int) değeri atanır. Yine örnek kodda yer alan func işlevi çağrılmayacaktır.

func()

ifadesi int türdendir. Derleyici yine bu ifadeyi yalnızca bir tür bilgisi olarak ele alır. İfadenin türü int olduğundan z değişkenine sizeof(int) değeri atanır.

sizeof işlecinin ürettiği değer derleme zamanında elde edildiğinden bir sabit ifadesidir. Bu yüzden bu değer sabit ifadesi gereken her yerde kullanılabilir:

/* ---------------------kod----------------------------*/

#include <stdio.h>

int main()
{
	int a[] = { 1, 5, 6, 7 };
	double b[sizeof(a) / sizeof(a[0])] = { 0. };
	//
}

/* ---------------------kod----------------------------*/

sizeof işleci ne amaçla kullanılır?
Belirli bir türden nesne için bellekte ne büyüklükte bir bellek alanına gereksinim duyulacağı sistemden sisteme farklılık gösterebilir. Tür uzunluklarının sistemden sisteme farklı olabilmesi bazı uygulamalarda taşınabilirlik sorunlarına yol açabilir. sizeof işlecinin, genel olarak bu tür taşınabilirlik sorunlarını ortadan kaldırmaya yönelik olarak kullanıldığı söylenebilir.
